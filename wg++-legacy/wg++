#!/bin/sh

# path:   /home/klassiker/.local/share/repos/pkgbuilds/wg++-legacy/wg++
# author: klassiker [mrdotx]
# url:    https://github.com/mrdotx/pkgbuilds
# date:   2025-08-08T05:29:23+0200

config_path="$HOME/wg++"
config_file="WebGrab++.config.xml"
exec_cmd="mono /opt/wg++/bin/WebGrab+Plus.exe"

script=$(basename "$0")
help="$script [-h/--help] -- script to start WebGrab+Plus.exe
  Introduction:
    Webgrabber+Plus was never intended to be installed in a Unix operating
    system. It was intended to be used as a folder to which the user has
    read/write access. This script was needed to make it behave like a real
    application, installed in the operating system.

    http://www.webgrabplus.com/content/solved-command-line-option-specifying-config-file-name

  Usage:
    $script <path>

  Settings:
    Without a path, the default configuration directory is used or
    will be created if it is missing.
    <path> = path to configuration directory

    The configuration template is stored in '/usr/share/wg++'.
    Copy it to your preferred location:
      cp -R '/usr/share/wg++' '/path/to/configuration_directory'

  Examples:
    $script
    $script '/path/to/configuration_directory'

  Config:
    config path  = $config_path
    config file  = $config_file
    exec command = $exec_cmd"

# check if the user has asked for help
case "$1" in
    -h | --help)
        printf "%s\n" "$help"
        exit 0
        ;;
esac

# check if the user has specified arguments
if [ $# -eq 0 ]; then # the user has not passed any arguments to wg++
    # use default configuration directory "$config_path"
    if [ ! -d "$config_path" ]; then
        cp -R /usr/share/wg++ "$config_path"
        if [ -d "$config_path" ]; then
            printf "Configuration folder '%s' created! Run '%s' again to use it.\n" \
                "$config_path" "$script"
            printf "For more information, see '%s --help'.\n" \
                "$script"
            exit 0
        else
            printf "Failed to create configuration folder '%s'!\n" \
                "$config_path"
            printf "%s\n" "$help"
            exit 1
        fi
    fi

    # check if "$config_path" contains the configuration file
    [ ! -f "$config_path/$config_file" ] \
        && printf "The configuration file is missing in '%s' directory!\n" \
            "$config_path" \
        && printf "%s\n" "$help" \
        && exit 1

    # check if the user can read/write "$config_path/$config_file"
    { [ ! -r "$config_path/$config_file" ] || [ ! -w "$config_path/$config_file" ]; } \
        && printf "You do not have read/write access in '%s'.\n" \
            "$config_path" \
        && printf "%s\n" "$help" \
        && exit 1

    eval "$exec_cmd $config_path"
else # the user has passed arguments to wg++
    # check whether 1 argument is present and whether it is an existing directory
    { [ $# -ge 2 ] || [ ! -d "$1" ]; } \
        && printf "Invalid path! You need to provide a path to WebGrabber+Plus configuration directory.\n" \
        && printf "%s\n" "$help" \
        && exit 1

    # check if the directory contains the configuration file
    [ ! -f "$1/$config_file" ] \
        && printf "Wrong path! Your provided path does not contain the configuration file.\n" \
        && printf "%s\n" "$help" \
        && exit 1

    # check if the user has read/write access to the given path
    { [ ! -r "$1/$config_file" ] || [ ! -w "$1/$config_file" ]; } \
        && printf "You do not have read/write access to your given directory.\n" \
        && printf "%s\n" "$help" \
        && exit 1

    eval "$exec_cmd $1"
fi
